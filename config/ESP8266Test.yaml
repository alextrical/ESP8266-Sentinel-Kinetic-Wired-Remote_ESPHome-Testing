substitutions:
  backlight_delay: "10"  # Backlight odd delay in seconds
  
esphome:
  name: esphome-web-aa5e2d
  friendly_name: VentAxia Controller 2
  min_version: 2024.11.0
  name_add_mac_suffix: false
  platformio_options:
    board_build.f_cpu: 160000000L
  on_boot:
    then:
      - button.press: alive
      - lambda: 'id(boot_time) = millis();'
      - binary_sensor.template.publish:
          id: backlight
          state: OFF
  
esp8266:
  board: d1_mini  # Adjust to your specific ESP8266 board

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret ota_pass

# WiFi credentials
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot if WiFi connection fails
  ap:
    ssid: "Ventaxia Fallback"
    password: !secret fallback_password

captive_portal:

# # Enable logging
logger:
  # level: NONE #Dissable logs on UART
  level: DEBUG
  # deassert_rts_dtr: true
  # hardware_uart : UART0 
  baud_rate: 0
  logs:
    component: ERROR

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 9600

i2c:
  sda: 4
  scl: 5
  scan: false


# External component for UART data processing
external_components:
  - source: github://eigger/espcomponents@v250508
    components: [ uartex ]
    refresh: always

uartex:
  rx_timeout: 10ms
  rx_header: [0x02]  # Header included in checksum
  rx_checksum2: !lambda |-
    uint16_t crc = 0xFFFF - 0x02;
    for (int i = 0; i < len; i++) crc -= data[i];
    //ESP_LOGD("main", "Value1: 0x%02X, Value2: 0x%02X", static_cast<uint8_t>(crc >> 8), static_cast<uint8_t>(crc));
    return { static_cast<uint8_t>(crc >> 8), static_cast<uint8_t>(crc) };
  tx_delay: 2ms
  tx_checksum2: !lambda |-
    uint16_t crc = 0xFFFF;
    for (int i = 0; i < len; i++) crc -= data[i];
    return { static_cast<uint8_t>(crc >> 8), static_cast<uint8_t>(crc) };

globals:
  - id: boot_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

display:
  - platform: lcd_pcf8574
    id: lcd
    dimensions: 16x2
    address: 0x27
    update_interval: 100ms
    lambda: |-
     /* if (millis() - id(boot_time) < 5000) {
        // Show splash screen for first 5 seconds
        it.print(0, 0, "VENT-AXIA Remote");
        int elapsed_seconds = (millis() - id(boot_time)) / (5000/8);
        std::string base_string = "V1 ESPHome ";
        std::string dots = "";
        for (int i = 0; i < elapsed_seconds && i < 6; i++) {
          dots += ".";
        }
        it.print(0, 1, (base_string + dots).c_str());
      } else { // Print to LCD */
        it.printf(0, 0, "%s", id(line1).state.c_str());
        it.printf(0, 1, "%s", id(line2).state.c_str());
      //}

interval:
  - interval: 26ms
    then:
      - if:
          condition:
            lambda: 'return id(bitfield_sensor).state > 0;'
          then:
            - button.press: send
            - binary_sensor.template.publish:
                id: backlight
                state: ON
          else:
            - binary_sensor.template.publish:
                id: backlight
                state: OFF

text_sensor:
  # Raw string from UART (read once)
  - platform: uartex
    name: None
    id: "lcd_raw"
    lambda: 'return std::string(reinterpret_cast<const char*>(data + 5), 33);'
    on_value:
      then:
        - component.update: line1 # Force template sensor update
        - component.update: line2
        - component.update: diagnostic_00
        - component.update: diagnostic_01
        - component.update: diagnostic_02
        - component.update: diagnostic_03
        - component.update: diagnostic_04
        - component.update: diagnostic_05
        - component.update: diagnostic_06
        - component.update: diagnostic_07
        - component.update: diagnostic_08
        - component.update: diagnostic_09
        - component.update: diagnostic_10
        - component.update: diagnostic_11
        - component.update: diagnostic_12
        - component.update: diagnostic_13
        - component.update: diagnostic_14
        - component.update: diagnostic_15
        - component.update: diagnostic_16
        - component.update: diagnostic_17
        - component.update: diagnostic_18
        - component.update: diagnostic_19
        - component.update: diagnostic_20
        - component.update: diagnostic_21
        - component.update: diagnostic_22
        - component.update: diagnostic_23
        - component.update: diagnostic_24
        - component.update: diagnostic_25
        - component.update: diagnostic_26
  - platform: template
    name: "Line1"
    id: "line1"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      return raw.substr(0, 16);
  - platform: template
    name: "Line2"
    id: "line2"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      return raw.substr(18, 33);

  # Extract Diagnostic 00
  - platform: template
    name: "Diagnostic 00"
    id: "diagnostic_00"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  00") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 01
  - platform: template
    name: "Diagnostic 01"
    id: "diagnostic_01"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  01") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 02
  - platform: template
    name: "Diagnostic 02"
    id: "diagnostic_02"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  02") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 03
  - platform: template
    name: "Diagnostic 03"
    id: "diagnostic_03"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  03") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 04
  - platform: template
    name: "Diagnostic 04"
    id: "diagnostic_04"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  04") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 05
  - platform: template
    name: "Diagnostic 05"
    id: "diagnostic_05"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  05") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 06
  - platform: template
    name: "Diagnostic 06"
    id: "diagnostic_06"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  06") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 07
  - platform: template
    name: "Diagnostic 07"
    id: "diagnostic_07"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  07") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 08
  - platform: template
    name: "Diagnostic 08"
    id: "diagnostic_08"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  08") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 09
  - platform: template
    name: "Diagnostic 09"
    id: "diagnostic_09"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  09") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 10
  - platform: template
    name: "Diagnostic 10"
    id: "diagnostic_10"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  10") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 11
  - platform: template
    name: "Diagnostic 11"
    id: "diagnostic_11"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  11") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 12
  - platform: template
    name: "Diagnostic 12"
    id: "diagnostic_12"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  12") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 13
  - platform: template
    name: "Diagnostic 13"
    id: "diagnostic_13"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  13") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 14
  - platform: template
    name: "Diagnostic 14"
    id: "diagnostic_14"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  14") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 15
  - platform: template
    name: "Diagnostic 15"
    id: "diagnostic_15"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  15") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 16
  - platform: template
    name: "Diagnostic 16"
    id: "diagnostic_16"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  16") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 17
  - platform: template
    name: "Diagnostic 17"
    id: "diagnostic_17"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  17") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 18
  - platform: template
    name: "Diagnostic 18"
    id: "diagnostic_18"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  18") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 19
  - platform: template
    name: "Diagnostic 19"
    id: "diagnostic_19"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  19") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 20
  - platform: template
    name: "Diagnostic 20"
    id: "diagnostic_20"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  20") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 21
  - platform: template
    name: "Diagnostic 21"
    id: "diagnostic_21"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  21") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 22
  - platform: template
    name: "Diagnostic 22"
    id: "diagnostic_22"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  22") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 23
  - platform: template
    name: "Diagnostic 23"
    id: "diagnostic_23"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  23") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 24
  - platform: template
    name: "Diagnostic 24"
    id: "diagnostic_24"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  24") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 25
  - platform: template
    name: "Diagnostic 25"
    id: "diagnostic_25"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  25") {
        return raw.substr(18, 33);
      }
      return {};

  # Extract Diagnostic 26
  - platform: template
    name: "Diagnostic 26"
    id: "diagnostic_26"
    lambda: |-
      std::string raw = id(lcd_raw).state;
      if (raw.substr(0, 14) == "Diagnostic  26") {
        return raw.substr(18, 33);
      }
      return {};

binary_sensor:
  - platform: gpio
    id: bit0
    pin:
      number: 12
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 0 (LSB)"
  - platform: gpio
    id: bit1
    pin:
      number: 0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 1"
  - platform: gpio
    id: bit2
    pin:
      number: 14
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 2"
  - platform: gpio
    id: bit3
    pin:
      number: 13
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 3 (MSB)"
  - platform: template
    id: backlight
    filters:
      - delayed_off: ${backlight_delay} s  # delay expects milliseconds
    on_press:
      lambda: 'id(lcd).backlight();'
    # on_release:
    #   lambda: 'id(lcd).no_backlight();'

sensor:
  - platform: binary_sensor_map
    id: bitfield_sensor
    name: "4-Bit Value"
    type: SUM
    channels:
      - binary_sensor: bit0
        value: 1  # 2^0
      - binary_sensor: bit1
        value: 2  # 2^1
      - binary_sensor: bit2
        value: 4  # 2^2
      - binary_sensor: bit3
        value: 8  # 2^3

button:
  - platform: uartex
    id: send
    command_on: !lambda |-
      return {0x04, 0x05, 0xAF, 0xEF, 0xFB, id(bitfield_sensor).state};
  - platform: uartex
    id: alive
    command_on: !lambda |-
      return {0x04, 0x06, 0xFF, 0xFF, 0xFF, 0x10};