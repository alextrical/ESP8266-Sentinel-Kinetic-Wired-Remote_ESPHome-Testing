substitutions:
  backlight_delay: "10"  # Backlight odd delay in seconds
  
esphome:
  name: display-test
  includes:
    - custom_lambdas.h
  on_boot:
    then:
      - lambda: |-
          id(boot_time) = millis();
          id(uart_bus).write_array(id(alive_str), 8); // Send the 8-byte array over UART
      - binary_sensor.template.publish:
          id: backlight
          state: OFF

esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

logger:
  deassert_rts_dtr: true
  hardware_uart : UART0
  level: DEBUG
  logs:
    component: ERROR

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO2
  baud_rate: 9600
  # data_bits: 8
  # parity: NONE
  # stop_bits: 1

# External component for UART data processing
external_components:
  - source: github://eigger/espcomponents@latest
    components: [ uartex ]
    refresh: always

uartex:
  rx_timeout: 10ms
  rx_header: [0x02, 0x00]
  rx_checksum2: !lambda |-
    uint16_t crc = 0xFFFF - 0x02;
    for (int i = 0; i < len; i++)
    {
      crc -= data[i];
    }
    return { (uint8_t)(crc >> 8), (uint8_t)(crc & 0xFF) };

globals:
  - id: button_sum
    type: int
    initial_value: '0'
  - id: va_out_buff
    type: uint8_t[8]
    initial_value: '{0x04,0x05,0xAF,0xEF,0xFB,0x00,0x00,0x00}'
  - id: alive_str
    type: uint8_t[8]
    initial_value: '{0x04,0x06,0xFF,0xFF,0xFF,0x10,0xFC,0xE8}'
  - id: boot_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

i2c:
  sda: 8
  scl: 9
  scan: false

display:
  - platform: lcd_pcf8574
    id: lcd
    dimensions: 16x2
    address: 0x27
    update_interval: 100ms
    lambda: |-
      if (millis() - id(boot_time) < 5000) {
        // Show splash screen for first 5 seconds
        it.print(0, 0, "VENT-AXIA Remote");
        int elapsed_seconds = (millis() - id(boot_time)) / (5000/8);
        std::string base_string = "V1.0 ESP ";
        std::string dots = "";
        for (int i = 0; i < elapsed_seconds && i < 7; i++) {
          dots += ".";
        }
        it.print(0, 1, (base_string + dots).c_str());
      } else { // Print to LCD
        it.printf(0, 0, "%s", id(line1).state.c_str());
        it.printf(0, 1, "%s", id(line2).state.c_str());
      }

text_sensor:
  - platform: uartex
    name: "Line1"
    id: "line1"
    lambda: |-
      std::string s;
      for (int i = 4; i < 20; i++) {
        s += static_cast<char>(data[i]);
      }
      return s.c_str();
  - platform: uartex
    name: "Line2"
    id: "line2"
    lambda: |-
      std::string s;
      for (int i = 21; i < 36; i++) {
        s += static_cast<char>(data[i]);
      }
      return s.c_str();

binary_sensor:
  - platform: gpio
    pin:
      number: 0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Up"
    on_press:
      - globals.set:
          id: button_sum
          value: !lambda 'return id(button_sum) + 2;'
      - lambda: 'VentAxiaSendKeyPress();'
      - binary_sensor.template.publish:
          id: backlight
          state: ON
    on_release:
      - lambda: 'VentAxiaSendKeyPress();'
      - globals.set:
          id: button_sum
          value: !lambda 'return (id(button_sum) >= 2) ? (id(button_sum) - 2) : 0;'
      - if:
          condition:
            lambda: 'return id(button_sum) == 0;' #if no buttons being held, start countdown for turning off the backlight
          then:
            - binary_sensor.template.publish:
                id: backlight
                state: OFF
  - platform: gpio
    pin:
      number: 12
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Down"
    on_press:
      - globals.set:
          id: button_sum
          value: !lambda 'return id(button_sum) + 1;'
      - lambda: 'VentAxiaSendKeyPress();'
      - binary_sensor.template.publish:
          id: backlight
          state: ON
    on_release:
      - lambda: 'VentAxiaSendKeyPress();'
      - globals.set:
          id: button_sum
          value: !lambda 'return (id(button_sum) >= 1) ? (id(button_sum) - 1) : 0;'
      - if:
          condition:
            lambda: 'return id(button_sum) == 0;'
          then:
            - binary_sensor.template.publish:
                id: backlight
                state: OFF
  - platform: gpio
    pin:
      number: 13
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Main"
    on_press:
      - globals.set:
          id: button_sum
          value: !lambda 'return id(button_sum) + 8;'
      - lambda: 'VentAxiaSendKeyPress();'
      - binary_sensor.template.publish:
          id: backlight
          state: ON
    on_release:
      - lambda: 'VentAxiaSendKeyPress();'
      - globals.set:
          id: button_sum
          value: !lambda 'return (id(button_sum) >= 8) ? (id(button_sum) - 8) : 0;'
      - if:
          condition:
            lambda: 'return id(button_sum) == 0;'
          then:
            - binary_sensor.template.publish:
                id: backlight
                state: OFF
  - platform: gpio
    pin:
      number: 14
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Set"
    on_press:
      - globals.set:
          id: button_sum
          value: !lambda 'return id(button_sum) + 4;'
      - lambda: 'VentAxiaSendKeyPress();'
      - binary_sensor.template.publish:
          id: backlight
          state: ON
    on_release:
      - lambda: 'VentAxiaSendKeyPress();'
      - globals.set:
          id: button_sum
          value: !lambda 'return (id(button_sum) >= 4) ? (id(button_sum) - 4) : 0;'
      - if:
          condition:
            lambda: 'return id(button_sum) == 0;'
          then:
            - binary_sensor.template.publish:
                id: backlight
                state: OFF

  - platform: template
    id: backlight
    filters:
      - delayed_off: ${backlight_delay} s  # delay expects milliseconds
    on_press:
      then:
        - lambda: |-
            id(lcd).backlight();
    on_release:
      then:
        - lambda: |-
            id(lcd).no_backlight();