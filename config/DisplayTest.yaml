substitutions:
  backlight_delay: "10"  # Backlight odd delay in seconds
  
esphome:
  name: display-test
  on_boot:
    then:
      - switch.toggle: alive
      - lambda: 'id(boot_time) = millis();'
      - binary_sensor.template.publish:
          id: backlight
          state: OFF

esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

logger:
  # level: NONE #Dissable logs on UART
  # deassert_rts_dtr: true
  hardware_uart : UART0
  level: DEBUG
#   logs:
#     component: ERROR

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO2
  baud_rate: 9600

# External component for UART data processing
external_components:
  - source: github://eigger/espcomponents@latest
    components: [ uartex ]
    refresh: always

uartex:
  rx_timeout: 10ms
  rx_header: [0x02]  # Header included in checksum
  rx_checksum2: !lambda |-
    uint16_t crc = 0xFFFF - 0x02;
    for (int i = 0; i < len; i++) crc -= data[i];
    //ESP_LOGD("main", "Value1: 0x%02X, Value2: 0x%02X", static_cast<uint8_t>(crc >> 8), static_cast<uint8_t>(crc));
    return { static_cast<uint8_t>(crc >> 8), static_cast<uint8_t>(crc) };
  tx_delay: 2ms
  tx_checksum2: !lambda |-
    uint16_t crc = 0xFFFF;
    for (int i = 0; i < len; i++) crc -= data[i];
    return { static_cast<uint8_t>(crc >> 8), static_cast<uint8_t>(crc) };

globals:
  - id: boot_time
    type: unsigned long
    restore_value: no
    initial_value: '0'

i2c:
  sda: 8
  scl: 9
  scan: false

display:
  - platform: lcd_pcf8574
    id: lcd
    dimensions: 16x2
    address: 0x27
    update_interval: 100ms
    lambda: |-
     /* if (millis() - id(boot_time) < 5000) {
        // Show splash screen for first 5 seconds
        it.print(0, 0, "VENT-AXIA Remote");
        int elapsed_seconds = (millis() - id(boot_time)) / (5000/8);
        std::string base_string = "V1 ESPHome ";
        std::string dots = "";
        for (int i = 0; i < elapsed_seconds && i < 6; i++) {
          dots += ".";
        }
        it.print(0, 1, (base_string + dots).c_str());
      } else { // Print to LCD */
        it.printf(0, 0, "%s", id(line1).state.c_str());
        it.printf(0, 1, "%s", id(line2).state.c_str());
      //}

interval:
  - interval: 26ms
    then:
      - if:
          condition:
            lambda: 'return id(bitfield_sensor).state > 0;'
          then:
            - switch.toggle: send
            - binary_sensor.template.publish:
                id: backlight
                state: ON
          else:
            - binary_sensor.template.publish:
                id: backlight
                state: OFF

text_sensor:
  - platform: uartex
    name: "Line1"
    id: "line1"
    lambda: 'return std::string(reinterpret_cast<const char*>(data + 5), 16);'
  - platform: uartex
    name: "Line2"
    id: "line2"
    lambda: 'return std::string(reinterpret_cast<const char*>(data + 22), 16);'

binary_sensor:
  - platform: gpio
    id: bit0
    pin:
      number: 12
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 0 (LSB)"
  - platform: gpio
    id: bit1
    pin:
      number: 0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 1"
  - platform: gpio
    id: bit2
    pin:
      number: 14
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 2"
  - platform: gpio
    id: bit3
    pin:
      number: 13
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Bit 3 (MSB)"
  - platform: template
    id: backlight
    filters:
      - delayed_off: ${backlight_delay} s  # delay expects milliseconds
    on_press:
      lambda: 'id(lcd).backlight();'
    # on_release:
    #   lambda: 'id(lcd).no_backlight();'

sensor:
  - platform: binary_sensor_map
    id: bitfield_sensor
    name: "4-Bit Value"
    type: SUM
    channels:
      - binary_sensor: bit0
        value: 1  # 2^0
      - binary_sensor: bit1
        value: 2  # 2^1
      - binary_sensor: bit2
        value: 4  # 2^2
      - binary_sensor: bit3
        value: 8  # 2^3

switch:
  - platform: uartex
    id: send
    command_on: !lambda |-
      return {0x04, 0x05, 0xAF, 0xEF, 0xFB, id(bitfield_sensor).state};
    command_off: !lambda |-
      return {0x04, 0x05, 0xAF, 0xEF, 0xFB, id(bitfield_sensor).state};
  - platform: uartex
    id: alive
    command_on: !lambda |-
      return {0x04, 0x06, 0xFF, 0xFF, 0xFF, 0x10};